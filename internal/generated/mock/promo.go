// Code generated by mockery v2.23.1. DO NOT EDIT.

package mock

import (
	context "context"

	repo "github.com/learn/api-shop/internal/repo"
	mock "github.com/stretchr/testify/mock"
)

// PromoRepository is an autogenerated mock type for the PromoRepository type
type PromoRepository struct {
	mock.Mock
}

// GetAllPromo provides a mock function with given fields: ctx
func (_m *PromoRepository) GetAllPromo(ctx context.Context) ([]repo.Promo, error) {
	ret := _m.Called(ctx)

	var r0 []repo.Promo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]repo.Promo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []repo.Promo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repo.Promo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPromoByProductID provides a mock function with given fields: ctx, productID
func (_m *PromoRepository) GetPromoByProductID(ctx context.Context, productID int64) (repo.Promo, error) {
	ret := _m.Called(ctx, productID)

	var r0 repo.Promo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (repo.Promo, error)); ok {
		return rf(ctx, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) repo.Promo); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Get(0).(repo.Promo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPromoRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPromoRepository creates a new instance of PromoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPromoRepository(t mockConstructorTestingTNewPromoRepository) *PromoRepository {
	mock := &PromoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
