// Code generated by mockery v2.23.1. DO NOT EDIT.

package mock

import (
	context "context"

	repo "github.com/learn/api-shop/internal/repo"
	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// GetAllProduct provides a mock function with given fields: ctx
func (_m *ProductRepository) GetAllProduct(ctx context.Context) ([]repo.Product, error) {
	ret := _m.Called(ctx)

	var r0 []repo.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]repo.Product, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []repo.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repo.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByProductID provides a mock function with given fields: ctx, id
func (_m *ProductRepository) GetProductByProductID(ctx context.Context, id int64) (repo.Product, error) {
	ret := _m.Called(ctx, id)

	var r0 repo.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (repo.Product, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) repo.Product); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repo.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductQtyByProductID provides a mock function with given fields: tx, ctx, form
func (_m *ProductRepository) UpdateProductQtyByProductID(tx *sqlx.Tx, ctx context.Context, form repo.Product) error {
	ret := _m.Called(tx, ctx, form)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sqlx.Tx, context.Context, repo.Product) error); ok {
		r0 = rf(tx, ctx, form)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProductRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductRepository(t mockConstructorTestingTNewProductRepository) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
