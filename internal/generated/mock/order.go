// Code generated by mockery v2.23.1. DO NOT EDIT.

package mock

import (
	context "context"

	repo "github.com/learn/api-shop/internal/repo"
	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// BeginTx provides a mock function with given fields:
func (_m *OrderRepository) BeginTx() (*sqlx.Tx, error) {
	ret := _m.Called()

	var r0 *sqlx.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func() (*sqlx.Tx, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *sqlx.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrder provides a mock function with given fields: tx, ctx, form
func (_m *OrderRepository) CreateOrder(tx *sqlx.Tx, ctx context.Context, form repo.Order) (int64, error) {
	ret := _m.Called(tx, ctx, form)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*sqlx.Tx, context.Context, repo.Order) (int64, error)); ok {
		return rf(tx, ctx, form)
	}
	if rf, ok := ret.Get(0).(func(*sqlx.Tx, context.Context, repo.Order) int64); ok {
		r0 = rf(tx, ctx, form)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*sqlx.Tx, context.Context, repo.Order) error); ok {
		r1 = rf(tx, ctx, form)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrderDetails provides a mock function with given fields: tx, ctx, form
func (_m *OrderRepository) CreateOrderDetails(tx *sqlx.Tx, ctx context.Context, form []repo.OrderDetail) error {
	ret := _m.Called(tx, ctx, form)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sqlx.Tx, context.Context, []repo.OrderDetail) error); ok {
		r0 = rf(tx, ctx, form)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOrderRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderRepository(t mockConstructorTestingTNewOrderRepository) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
