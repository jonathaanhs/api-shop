// Code generated by mockery v2.23.1. DO NOT EDIT.

package mock

import (
	context "context"

	repo "github.com/learn/api-shop/internal/repo"
	mock "github.com/stretchr/testify/mock"

	service "github.com/learn/api-shop/internal/service"
)

// CheckoutUsecase is an autogenerated mock type for the CheckoutUsecase type
type CheckoutUsecase struct {
	mock.Mock
}

// Checkout provides a mock function with given fields: ctx, form
func (_m *CheckoutUsecase) Checkout(ctx context.Context, form []repo.OrderDetail) (service.Checkout, error) {
	ret := _m.Called(ctx, form)

	var r0 service.Checkout
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []repo.OrderDetail) (service.Checkout, error)); ok {
		return rf(ctx, form)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []repo.OrderDetail) service.Checkout); ok {
		r0 = rf(ctx, form)
	} else {
		r0 = ret.Get(0).(service.Checkout)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []repo.OrderDetail) error); ok {
		r1 = rf(ctx, form)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCheckoutUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewCheckoutUsecase creates a new instance of CheckoutUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCheckoutUsecase(t mockConstructorTestingTNewCheckoutUsecase) *CheckoutUsecase {
	mock := &CheckoutUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
